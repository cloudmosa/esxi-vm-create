#!/usr/bin/python


import argparse                   # Argument parser
import datetime                   # For current Date/Time
import os.path                    # To check if file exists
import sys                        # For args
import re                         # For regex
import paramiko                   # For remote ssh
import warnings
import time

from esxi_vm_functions import *

#      Defaults and Variable setup
ConfigData = setup_config()
NAME = ""
isDryRun = ConfigData['isDryRun']
isVerbose = ConfigData['isVerbose']
HOST = ConfigData['HOST']
USER = ConfigData['USER']
PASSWORD = ConfigData['PASSWORD']
CPU = ConfigData['CPU']
MEM = ConfigData['MEM']
HDISK = int(ConfigData['HDISK'])
DISKFORMAT = ConfigData['DISKFORMAT']
STORE = ConfigData['STORE']
NET = ConfigData['NET']
NET2 = ConfigData['NET2']
ISO = ConfigData['ISO']
GUESTOS = ConfigData['GUESTOS']
VMXOPTS = ConfigData['VMXOPTS']
ANNOTATION = ""

ErrorMessages = ""
MAC = ""
MAC2 = ""
GeneratedMAC = ""
GeneratedMAC2 = ""
ISOfound = False
CheckHasErrors = False
ExecuteHasErrors = False
LeastUsedDS = ""
DSPATH=""
DSSTORE=""
FullPathExists = False

#
#      Process Arguments
#
parser = argparse.ArgumentParser(description='ESXi Create VM utility.')

parser.add_argument('-d', '--dry', dest='isDryRunarg', action='store_true', help="Enable Dry Run mode  (" + str(isDryRun) + ")")
parser.add_argument('-H', '--Host', dest='HOST', type=str, help="ESXi Host/IP  (" + str(HOST) + ")")
parser.add_argument('-U', '--User', dest='USER', type=str, help="ESXi Host username  (" + str(USER) + ")")
parser.add_argument('-P', '--Password', dest='PASSWORD', type=str, help="ESXi Host password  (*****)")
parser.add_argument('-n', '--name', dest='NAME', type=str, help="VM name")
parser.add_argument('-c', '--cpu', dest='CPU', type=int, help="Number of vCPUS  (" + str(CPU) + ")")
parser.add_argument('-m', '--mem', type=int, help="Memory in GB  (" + str(MEM) + ")")
parser.add_argument('-v', '--vdisk', dest='HDISK', type=str, help="Size of virt hdisk in GB  (" + str(HDISK) + ")")
parser.add_argument('-i', '--iso', dest='ISO', type=str, help="CDROM ISO Path | None  (" + str(ISO) + ")")
parser.add_argument('-N', '--net', dest='NET', type=str, help="Network Interface | None  (" + str(NET) + ")")
parser.add_argument(      '--net2', dest='NET2', type=str, help="Second Network Interface | None  (" + str(NET) + ")")
parser.add_argument('-M', '--mac', dest='MAC', type=str, help="MAC address")
parser.add_argument(      '--mac2', dest='MAC2', type=str, help="Second MAC address")
parser.add_argument('-S', '--store', dest='STORE', type=str, help="vmfs Store | LeastUsed  ("  + str(STORE) + ")")
parser.add_argument('-g', '--guestos', dest='GUESTOS', type=str, help="Guest OS. (" + str(GUESTOS) + ")")
parser.add_argument('-a', '--annotation', dest='ANNOTATION', type=str, help="Annotation")
parser.add_argument('-o', '--options', dest='VMXOPTS', type=str, default='NIL', help="Comma list of VMX Options.")
parser.add_argument('-V', '--verbose', dest='isVerbosearg', action='store_true', help="Enable Verbose mode  (" + str(isVerbose) + ")")


args = parser.parse_args()

if args.isDryRunarg:
    isDryRun = True
if args.isVerbosearg:
    isVerbose = True
if args.HOST:
    HOST=args.HOST
if args.USER:
    USER=args.USER
if args.PASSWORD:
    PASSWORD=args.PASSWORD
if args.NAME:
    NAME=args.NAME
if args.CPU:
    CPU=int(args.CPU)
if args.mem:
    MEM=int(args.mem)
if args.HDISK:
    HDISK=int(args.HDISK)
if args.ISO:
    ISO=args.ISO
if args.NET:
    NET=args.NET
if args.NET2:
    NET2=args.NET2
if args.MAC:
    MAC=args.MAC
if args.MAC2:
    MAC2=args.MAC2
if args.STORE:
    STORE=args.STORE
if STORE == "":
    STORE = "LeastUsed"
if args.GUESTOS:
    GUESTOS=args.GUESTOS
if args.ANNOTATION:
    ANNOTATION=args.ANNOTATION
if args.VMXOPTS == '' and VMXOPTS != '':
    VMXOPTS=''
if args.VMXOPTS and args.VMXOPTS != 'NIL':
    VMXOPTS=args.VMXOPTS.split(",")

#
#      main()
#

if NAME == "":
    print("ERROR: Missing required option --name")
    sys.exit(1)

try:
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    ssh.connect(HOST, username=USER, password=PASSWORD)

    (stdin, stdout, stderr) = ssh.exec_command("esxcli system version get |grep Version")
    type(stdin)
    if re.match("Version", str(stdout.readlines())) is not None:
        print("ERROR: Unable to determine if this is a ESXi Host: %s, username: %s" % (HOST, USER))
        sys.exit(1)
except:
    print("ERROR: Unable to access ESXi Host: %s, username: %s" % (HOST, USER))
    print(str(sys.exc_info()[0]))
    sys.exit(1)

#
#      Get list of DataStores, store in VOLUMES
#
try:
    (stdin, stdout, stderr) = ssh.exec_command("esxcli storage filesystem list |grep '/vmfs/volumes/.*true  VMFS' |sort -nk7")
    type(stdin)
    VOLUMES = {}
    for line in stdout.readlines():
        splitLine = line.split()
        VOLUMES[splitLine[0]] = splitLine[1]
        LeastUsedDS = splitLine[1]
except:
    print("ERROR: Unable to get datastores.")
    print(str(sys.exc_info()[0]))
    sys.exit(1)

if STORE == "LeastUsed":
    STORE = LeastUsedDS


#
#      Get list of Networks available, store in VMNICS
#
try:
    (stdin, stdout, stderr) = ssh.exec_command("esxcli network vswitch standard list|grep Portgroups|sed 's/^   Portgroups: //g'")
    type(stdin)
    VMNICS = []
    for line in stdout.readlines():
        splitLine = re.split(',|\n', line)
        VMNICS.append(splitLine[0])
except:
    print("ERROR: Unable to get networks.")
    print("The Error is " + str(sys.exc_info()[0]))
    sys.exit(1)

#
#      Check MAC address
#
MACarg = MAC
MAC2arg = MAC2
if MAC != "":
    MACregex = '^([a-fA-F0-9]{2}[:|\-]){5}[a-fA-F0-9]{2}$'
    if re.compile(MACregex).search(MAC):
        # Full MAC found. OK
        MAC = MAC.replace("-",":")
    elif re.compile(MACregex).search("00:50:56:" + MAC):
        MAC="00:50:56:" + MAC.replace("-",":")
    else:
        ErrorMessages += "\n" + MAC + " Invalid MAC address."
        CheckHasErrors = True
if MAC2 != "":
    MACregex = '^([a-fA-F0-9]{2}[:|\-]){5}[a-fA-F0-9]{2}$'
    if re.compile(MACregex).search(MAC2):
        # Full MAC found. OK
        MAC2 = MAC2.replace("-",":")
    elif re.compile(MACregex).search("00:50:56:" + MAC2):
        MAC2="00:50:56:" + MAC2.replace("-",":")
    else:
        ErrorMessages += "\n" + MAC2 + " Invalid MAC address."
        CheckHasErrors = True


#
#      Get from ESXi host if ISO exists
#
ISOarg = ISO
if ISO == "None":
    ISO = ""
if ISO != "":
    try:
        #  If ISO has no "/", try to find the ISO
        if not re.match('/', ISO):
            (stdin, stdout, stderr) = ssh.exec_command("find /vmfs/volumes/ -type f -name " + ISO + " -exec sh -c 'echo $1; kill $PPID' sh {} 2>/dev/null \;")
            type(stdin)
            FoundISOPath = str(stdout.readlines()[0]).strip('\n')
            if isVerbose:
                print("FoundISOPath: " + str(FoundISOPath))
            ISO = str(FoundISOPath)

        (stdin, stdout, stderr) = ssh.exec_command("ls " + str(ISO))
        type(stdin)
        if stdout.readlines() and not stderr.readlines():
            ISOfound = True

    except:
        print("ERROR: Unable to find CDROM ISO file")
        print(str(sys.exc_info()[0]))
        sys.exit(1)

#
#      Check if VM already exists
#
VMID = -1
try:
    (stdin, stdout, stderr) = ssh.exec_command("vim-cmd vmsvc/getallvms")
    type(stdin)
    for line in stdout.readlines():
        splitLine = line.split()
        if NAME == splitLine[1]:
            VMID = splitLine[0]
            ErrorMessages += "\nVM " + NAME + " already exists."
            CheckHasErrors = True
except:
    print("ERROR: Unable to get VM list")
    print(str(sys.exc_info()[0]))
    sys.exit(1)

#
#      Do checks here
#

#  Check CPU
if CPU < 1 or CPU > 128:
    ErrorMessages += "\n" + str(CPU) + " CPU out of range. [1-128]."
    CheckHasErrors = True

#  Check MEM
if MEM < 1 or MEM > 4080:
    ErrorMessages += "\n" + str(MEM) + "GB Memory out of range. [1-4080]."
    CheckHasErrors = True

#  Check HDISK
if HDISK < 1 or HDISK > 63488:
    ErrorMessages += "\nVirtual Disk size " + str(HDISK) + "GB out of range. [1-63488]."
    CheckHasErrors = True

#  Convert STORE to path and visa-versa
V = []
for Path in VOLUMES:
    V.append(VOLUMES[Path])
    if STORE == Path or STORE == VOLUMES[Path]:
        DSPATH = Path
        DSSTORE = VOLUMES[Path]

if DSSTORE not in V:
    ErrorMessages += "\nDisk Storage " + STORE + " doesn't exist."
    ErrorMessages += " Available Disk Stores: " + str([str(item) for item in V])
    ErrorMessages += " LeastUsed Disk Store : " + str(LeastUsedDS)
    CheckHasErrors = True

#  Check NIC  (NIC record)
if (NET not in VMNICS) and (NET != "None"):
    ErrorMessages += "\nVirtual NIC " + NET + " doesn't exist."
    ErrorMessages += " Available VM NICs: " + str([str(item) for item in VMNICS]) + " or 'None'"
    CheckHasErrors = True
if (NET2 not in VMNICS) and (NET2 != "None"):
    ErrorMessages += "\nVirtual NIC " + NET2 + " doesn't exist."
    ErrorMessages += " Available VM NICs: " + str([str(item) for item in VMNICS]) + " or 'None'"
    CheckHasErrors = True

#  Check ISO exists
if ISO != "" and not ISOfound:
    ErrorMessages += "\nISO " + ISO + " not found.  Use full path to ISO"
    CheckHasErrors = True

#  Check if DSPATH/NAME aready exists
try:
    FullPath = DSPATH + "/" + NAME
    (stdin, stdout, stderr) = ssh.exec_command("ls -d " + FullPath)
    type(stdin)
    if stdout.readlines() and not stderr.readlines():
        ErrorMessages += "\nVM Directory " + FullPath + " already exists."
        CheckHasErrors = True
except:
    pass

##
if CheckHasErrors:
    print('ERROR: Parameter has error' + ErrorMessages)
    sys.exit(1)

if isDryRun:
    print('OK: No error was found for dry run.')
    sys.exit(0)

#
#      Create the VM
#
VMX = []
VMX.append('.encoding = "UTF-8"')
VMX.append('config.version = "8"')
VMX.append('virtualHW.version = "19"')
VMX.append('nvram = "' + NAME + '.nvram"')
VMX.append('svga.present = "TRUE"')
VMX.append('pciBridge0.present = "TRUE"')
VMX.append('pciBridge4.present = "TRUE"')
VMX.append('pciBridge4.virtualDev = "pcieRootPort"')
VMX.append('pciBridge4.functions = "8"')
VMX.append('pciBridge5.present = "TRUE"')
VMX.append('pciBridge5.virtualDev = "pcieRootPort"')
VMX.append('pciBridge5.functions = "8"')
VMX.append('pciBridge6.present = "TRUE"')
VMX.append('pciBridge6.virtualDev = "pcieRootPort"')
VMX.append('pciBridge6.functions = "8"')
VMX.append('pciBridge7.present = "TRUE"')
VMX.append('pciBridge7.virtualDev = "pcieRootPort"')
VMX.append('pciBridge7.functions = "8"')
VMX.append('vmci0.present = "TRUE"')
VMX.append('hpet0.present = "TRUE"')
VMX.append('floppy0.present = "FALSE"')
VMX.append('RemoteDisplay.maxConnections = "-1"')
VMX.append('numvcpus = "' + str(CPU) + '"');
VMX.append('memSize = "' + str(MEM * 1024) + '"')
VMX.append('bios.bootRetry.delay = "10"')
VMX.append('firmware = "efi"')
VMX.append('powerType.powerOff = "default"')
VMX.append('powerType.suspend = "soft"')
VMX.append('powerType.reset = "default"')
VMX.append('tools.upgrade.policy = "manual"')
VMX.append('sched.cpu.units = "mhz"')
VMX.append('sched.cpu.affinity = "all"')
VMX.append('sched.cpu.latencySensitivity = "normal"')
VMX.append('vm.createDate = "' + str(int(time.time())) + '"')
VMX.append('scsi0.virtualDev = "lsilogic"')
VMX.append('scsi0.present = "TRUE"')
VMX.append('sata0.present = "TRUE"')
VMX.append('usb.present = "TRUE"')
VMX.append('ehci.present = "TRUE"')
VMX.append('svga.autodetect = "TRUE"')
VMX.append('scsi0:0.deviceType = "scsi-hardDisk"')
VMX.append('scsi0:0.fileName = "' + NAME + '.vmdk"')
VMX.append('sched.scsi0:0.shares = "normal"')
VMX.append('sched.scsi0:0.throughputCap = "off"')
VMX.append('scsi0:0.present = "TRUE"')

if NET != "None":
    VMX.append('ethernet0.networkName = "' + NET + '"')
    if MAC == "":
        VMX.append('ethernet0.addressType = "generated"')
    else:
        VMX.append('ethernet0.addressType = "static"')
        VMX.append('ethernet0.address = "' + MAC + '"')
    VMX.append('ethernet0.wakeOnPcktRcv = "FALSE"')
    VMX.append('ethernet0.uptCompatibility = "TRUE"')
    VMX.append('ethernet0.present = "TRUE"')
    VMX.append('ethernet0.pciSlotNumber = "160"')

    if NET2 != "None":
        VMX.append('ethernet1.networkName = "' + NET2 + '"')
        if MAC == "":
            VMX.append('ethernet1.addressType = "generated"')
        else:
            VMX.append('ethernet1.addressType = "static"')
            VMX.append('ethernet1.address = "' + MAC2 + '"')
        VMX.append('ethernet1.wakeOnPcktRcv = "FALSE"')
        VMX.append('ethernet1.uptCompatibility = "TRUE"')
        VMX.append('ethernet1.present = "TRUE"')
        VMX.append('ethernet1.pciSlotNumber = "192"')

VMX.append('displayName = "' + NAME + '"')
VMX.append('guestOS = "' + GUESTOS + '"')

VMX.append('toolScripts.afterPowerOn = "TRUE"')
VMX.append('toolScripts.afterResume = "TRUE"')
VMX.append('toolScripts.beforeSuspend = "TRUE"')
VMX.append('toolScripts.beforePowerOff = "TRUE"')
VMX.append('tools.syncTime = "FALSE"')
VMX.append('sched.cpu.min = "0"')
VMX.append('sched.cpu.shares = "normal"')
VMX.append('sched.mem.min = "0"')
VMX.append('sched.mem.minSize = "0"')
VMX.append('sched.mem.shares = "normal"')
VMX.append('numa.autosize.cookie = "80012"')
VMX.append('numa.autosize.vcpu.maxPerVirtualNode = "8"')
VMX.append('scsi0:0.redo = ""')
VMX.append('pciBridge0.pciSlotNumber = "17"')
VMX.append('pciBridge4.pciSlotNumber = "21"')
VMX.append('pciBridge5.pciSlotNumber = "22"')
VMX.append('pciBridge6.pciSlotNumber = "23"')
VMX.append('pciBridge7.pciSlotNumber = "24"')
VMX.append('scsi0.pciSlotNumber = "16"')
VMX.append('usb.pciSlotNumber = "32"')
VMX.append('ehci.pciSlotNumber = "33"')
VMX.append('sata0.pciSlotNumber = "34"')
VMX.append('svga.vramSize = "16777216"')
VMX.append('vmotion.checkpointFBSize = "16777216"')
VMX.append('vmotion.checkpointSVGAPrimarySize = "16777216"')
VMX.append('vmotion.svga.mobMaxSize = "16777216"')
VMX.append('vmotion.svga.graphicsMemoryKB = "16384"')
VMX.append('vmci0.id = "134664824"')
VMX.append('monitor.phys_bits_used = "45"')
VMX.append('cleanShutdown = "FALSE"')
VMX.append('softPowerOff = "FALSE"')
VMX.append('usb:0.present = "TRUE"')
VMX.append('usb:0.deviceType = "hid"')
VMX.append('usb:0.port = "0"')
VMX.append('usb:0.parent = "-1"')
VMX.append('usb:1.speed = "2"')
VMX.append('usb:1.present = "TRUE"')
VMX.append('usb:1.deviceType = "hub"')
VMX.append('usb:1.port = "1"')
VMX.append('usb:1.parent = "-1"')

if ISO != "":
    VMX.append('ide1:0.present = "TRUE"')
    VMX.append('ide1:0.fileName = "' + ISO + '"')
    VMX.append('ide1:0.deviceType = "cdrom-image"')

if ANNOTATION != "":
    VMX.append('annotation = "' + ANNOTATION + '"')

#
#   Merge extra VMX options
for VMXopt in VMXOPTS:
    try:
        k,v = VMXopt.split("=")
    except:
        k=""
        v=""
    key = k.lstrip().strip()
    value = v.lstrip().strip()
    for i in VMX:
        try:
            ikey,ivalue = i.split("=")
        except:
            break
        if ikey.lstrip().strip().lower() == key.lower():
            index = VMX.index(i)
            VMX[index] = ikey + " = " + value
            break
    else:
        if key != '' and value != '':
            VMX.append(key + " = " + value)

if isVerbose and VMXOPTS != '':
    print("VMX file:")
    for i in VMX:
        print(i)

MyVM = FullPath + "/" + NAME

try:
    # Create NAME.vmx
    if isVerbose:
        print("Create " + NAME + ".vmx file")
    (stdin, stdout, stderr) = ssh.exec_command("mkdir " + FullPath )
    type(stdin)
    for line in VMX:
        (stdin, stdout, stderr) = ssh.exec_command("echo '" + line + "' >>" + MyVM + ".vmx")
        type(stdin)

    # Create vmdk
    if isVerbose:
        print("Create " + NAME + ".vmdk file")
    (stdin, stdout, stderr) = ssh.exec_command("vmkfstools -c " + str(HDISK) + "G -d " + DISKFORMAT + " " + MyVM + ".vmdk")
    type(stdin)

    # Register VM
    if isVerbose:
        print("Register VM")
    (stdin, stdout, stderr) = ssh.exec_command("vim-cmd solo/registervm " + MyVM + ".vmx")
    type(stdin)
    try:
        VMID = int(stdout.readlines()[0])
    except:
        print("ERROR: Register VM failed.")
        print(stdout.readlines())
        sys.exit(1)

    # Power on VM
    if isVerbose:
        print("Power ON VM")
    (stdin, stdout, stderr) = ssh.exec_command("vim-cmd vmsvc/power.on " + str(VMID))
    type(stdin)
    if stderr.readlines():
        print("ERROR: Power on VM failed.")
        print(stderr.readlines())
        sys.exit(1)

except:
    print("ERROR: Unexpected error during creating the VM.")
    print(stdout)
    print(stderr)
    sys.exit(1)

# Get generated MAC
try:
    if NET != "None":
        (stdin, stdout, stderr) = ssh.exec_command(
            "grep -i 'ethernet0.*ddress = ' " + MyVM + ".vmx |tail -1|awk '{print $NF}'")
        type(stdin)
        GeneratedMAC = str(stdout.readlines()[0]).strip('\n"')
        if NET2 != "None":
            (stdin, stdout, stderr) = ssh.exec_command(
                "grep -i 'ethernet1.*ddress = ' " + MyVM + ".vmx |tail -1|awk '{print $NF}'")
            type(stdin)
            GeneratedMAC2 = str(stdout.readlines()[0]).strip('\n"')
except:
    print("WARNING: Fail to get generated MAC address.")

# Print Summary

print("OK")
print("ESXi Host: " + HOST)
print("VM NAME: " + NAME)
print("vCPU: " + str(CPU))
print("Memory: " + str(MEM) + "GB")
print("Disk: " + str(HDISK) + "GB")
print("Disk: Format: " + DISKFORMAT)
print("Datastore: " + DSSTORE)
print("Network: " + NET)
print("MAC: " + GeneratedMAC)
if NET2 != "None":
    print("Network2: " + NET2)
    print("MAC2: " + GeneratedMAC2)
if ISO:
    print("ISO: " + ISO)
print("Guest OS: " + GUESTOS)
print("ANNOTATION: " + AANOTATION)

stdin.close()

sys.exit(0)

